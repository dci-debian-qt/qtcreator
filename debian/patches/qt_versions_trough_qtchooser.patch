commit f5ef9451c30b1b3c9c6f7b314148af22e34d606e
Author: Sune Vuorela <sune@vuorela.dk>
Date:   Thu Oct 16 13:52:28 2014 +0200
 
    Gather Qt versions from qtchooser on first run
   
    Change-Id: I33ae062c3225fb3d7b7d1a62e0e287d326bb4276
 
Index: qtcreator/src/plugins/qtsupport/qtchooserqtgatherer.cpp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qtcreator/src/plugins/qtsupport/qtchooserqtgatherer.cpp	2014-12-25 01:59:14.818719981 -0600
@@ -0,0 +1,117 @@
+/****************************************************************************
+ * *
+ ** Copyright (C) 2014 Sune Vuorela <sune@kde.org>
+ ** Contact: http://www.qt-project.org/
+ **
+ ** This file is part of Qt Creator
+ **
+ ** $QT_BEGIN_LICENSE:BSD$
+ ** You may use this file under the terms of the BSD license as follows:
+ **
+ ** "Redistribution and use in source and binary forms, with or without
+ ** modification, are permitted provided that the following conditions are
+ ** met:
+ **   * Redistributions of source code must retain the above copyright
+ **     notice, this list of conditions and the following disclaimer.
+ **   * Redistributions in binary form must reproduce the above copyright
+ **     notice, this list of conditions and the following disclaimer in
+ **     the documentation and/or other materials provided with the
+ **     distribution.
+ **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+ **     of its contributors may be used to endorse or promote products derived
+ **     from this software without specific prior written permission.
+ **
+ **
+ ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+ **
+ ** $QT_END_LICENSE$
+ **
+ ****************************************************************************/
+
+#include "qtchooserqtgatherer.h"
+#include <QStandardPaths>
+#include <QProcess>
+#include <QSet>
+
+namespace QtSupport {
+namespace Internal {
+
+/**
+ * @brief extractPath extracts the path component from the QTTOOLDIR line in the qtchooser -print-env output
+ * @param data QTTOOLDIR line in qtchooser output
+ * @return path extracted
+ */
+static QString extractPath(const QByteArray &data)
+{
+    QByteArray data2 = data.left(data.length() - 1); // remove end apostrophe
+    QByteArray data3 = data2.right(data2.length() - 11); // remove QTTOOLDIR="
+    return QString::fromLocal8Bit(data3);
+}
+
+/**
+ * @brief runQtChooser executes qtchooser in a process and returns it's output
+ * @param qtchooser path to qtchooser
+ * @param args arguments passed to qtchooser
+ * @return output of the qtchooser command as a list of bytearrays.
+ */
+static QList<QByteArray> runQtChooser(const QString &qtchooser, const QStringList &args)
+{
+    QProcess p;
+    p.start(qtchooser,args);
+    bool success = p.waitForFinished();
+    if (!success)
+        return QList<QByteArray>();
+
+    QByteArray outputString = p.readAllStandardOutput();
+    QList<QByteArray> outputs = outputString.split('\n');
+    return outputs;
+}
+
+/**
+ * @brief qmakePath asks qtchooser for the qmake path of a given version
+ * @param qtchooser path to qtchooser
+ * @param version the version according to qtchooser output
+ * @return
+ */
+static QString qmakePath(const QString &qtchooser, const QString &version)
+{
+    QList<QByteArray> outputs = runQtChooser(qtchooser, QStringList()
+                                             << QStringLiteral("-qt=%1").arg(version)
+                                             << QStringLiteral("-print-env"));
+    foreach (const QByteArray &output, outputs) {
+        if (output.startsWith("QTTOOLDIR=\""))
+            return QStandardPaths::findExecutable(QStringLiteral("qmake"), QStringList()
+                                                  << extractPath(output));
+    }
+    return QString();
+}
+
+QStringList gatherQmakePathsFromQtChooser()
+{
+    const QString qtchooser = QStandardPaths::findExecutable(QStringLiteral("qtchooser"));
+    if (qtchooser.isNull())
+        return QList<QString>();
+
+    QList<QByteArray> versions = runQtChooser(qtchooser, QStringList()
+                                              << QStringLiteral("-l"));
+
+    QSet<QString> foundQMakes;
+    foreach (const QByteArray &version, versions) {
+        QString possibleQMake = qmakePath(qtchooser, QString::fromLocal8Bit(version));
+        if (!possibleQMake.isEmpty())
+            foundQMakes << possibleQMake;
+    }
+    return QStringList(foundQMakes.toList());
+}
+} // namespace Internal
+} // namespace QtSupport
Index: qtcreator/src/plugins/qtsupport/qtchooserqtgatherer.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qtcreator/src/plugins/qtsupport/qtchooserqtgatherer.h	2014-12-25 01:59:14.818719981 -0600
@@ -0,0 +1,57 @@
+/****************************************************************************
+ * *
+ ** Copyright (C) 2014 Sune Vuorela <sune@kde.org>
+ ** Contact: http://www.qt-project.org/
+ **
+ ** This file is part of Qt Creator.
+ **
+ ** $QT_BEGIN_LICENSE:BSD$
+ ** You may use this file under the terms of the BSD license as follows:
+ **
+ ** "Redistribution and use in source and binary forms, with or without
+ ** modification, are permitted provided that the following conditions are
+ ** met:
+ **   * Redistributions of source code must retain the above copyright
+ **     notice, this list of conditions and the following disclaimer.
+ **   * Redistributions in binary form must reproduce the above copyright
+ **     notice, this list of conditions and the following disclaimer in
+ **     the documentation and/or other materials provided with the
+ **     distribution.
+ **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+ **     of its contributors may be used to endorse or promote products derived
+ **     from this software without specific prior written permission.
+ **
+ **
+ ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+ **
+ ** $QT_END_LICENSE$
+ **
+ ****************************************************************************/
+
+
+#ifndef QTCHOOSERQTGATHERER_H
+#define QTCHOOSERQTGATHERER_H
+#include <QList>
+#include <QString>
+
+namespace QtSupport {
+namespace Internal {
+    /**
+     * @brief gatherQmakePathsFromQtChooser asks qtchooser for available qmakes
+     * @return list of paths to qmakes found with qtchooser
+     */
+    QStringList gatherQmakePathsFromQtChooser();
+} // namespace Internal
+} // namespace QtSupport
+
+#endif // QTCHOOSERQTGATHERER_H
Index: qtcreator/src/plugins/qtsupport/qtsupport.pro
===================================================================
--- qtcreator.orig/src/plugins/qtsupport/qtsupport.pro	2014-12-25 01:59:14.822719982 -0600
+++ qtcreator/src/plugins/qtsupport/qtsupport.pro	2014-12-25 11:27:16.928737915 -0600
@@ -7,6 +7,7 @@
 include(../../shared/proparser/proparser.pri)
 
 HEADERS += \
+    qtchooserqtgatherer.h \
     codegenerator.h \
     codegensettings.h \
     codegensettingspage.h \
@@ -39,6 +40,7 @@
     winceqtversion.h
 
 SOURCES += \
+    qtchooserqtgatherer.cpp \
     codegenerator.cpp \
     codegensettings.cpp \
     codegensettingspage.cpp \
Index: qtcreator/src/plugins/qtsupport/qtversionmanager.cpp
===================================================================
--- qtcreator.orig/src/plugins/qtsupport/qtversionmanager.cpp	2014-12-25 01:59:14.822719982 -0600
+++ qtcreator/src/plugins/qtsupport/qtversionmanager.cpp	2014-12-25 11:27:56.452739452 -0600
@@ -34,6 +34,7 @@
 #include "qtversionfactory.h"
 #include "baseqtversion.h"
 #include "qtsupportconstants.h"
+#include "qtchooserqtgatherer.h"
 
 #include <coreplugin/icore.h>
 #include <coreplugin/helpmanager.h>
@@ -436,15 +437,26 @@
 
 static void findSystemQt()
 {
+    QList<FileName> systemQMakes;
     FileName systemQMakePath = BuildableHelperLibrary::findSystemQt(Environment::systemEnvironment());
-    if (systemQMakePath.isNull())
-        return;
 
-    BaseQtVersion *version
-            = QtVersionFactory::createQtVersionFromQMakePath(systemQMakePath, false, QLatin1String("PATH"));
-    if (version) {
-        version->setUnexpandedDisplayName(BaseQtVersion::defaultUnexpandedDisplayName(systemQMakePath, true));
-        m_versions.insert(version->uniqueId(), version);
+    if (!systemQMakePath.isNull())
+        systemQMakes << systemQMakePath;
+
+    QStringList qmakePathsFromQtChooser = gatherQmakePathsFromQtChooser();
+    qmakePathsFromQtChooser.removeAll(systemQMakePath.toString());
+    foreach (const QString &qmakePath, qmakePathsFromQtChooser) {
+        FileName qmake = FileName::fromString(qmakePath);
+        systemQMakes << qmake;
+    }
+
+    foreach (const FileName &qmakePath, systemQMakes) {
+        BaseQtVersion *version =
+                QtVersionFactory::createQtVersionFromQMakePath(qmakePath, true, QLatin1String("PATH"));
+        if (version) {
+             version->setUnexpandedDisplayName(BaseQtVersion::defaultUnexpandedDisplayName(qmakePath, true));
+             m_versions.insert(version->uniqueId(), version);
+        }
     }
 }
 
